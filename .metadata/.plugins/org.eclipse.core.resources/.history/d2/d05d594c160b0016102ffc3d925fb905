package edu.uoc.ictflag.ela.web;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.faces.context.FacesContext;
import javax.faces.view.ViewScoped;
import javax.inject.Inject;
import javax.inject.Named;

import org.primefaces.model.chart.Axis;
import org.primefaces.model.chart.AxisType;
import org.primefaces.model.chart.BarChartModel;
import org.primefaces.model.chart.ChartSeries;

import edu.uoc.ictflag.core.localization.LocalizationController;
import edu.uoc.ictflag.core.localization.LocalizedItem;
import edu.uoc.ictflag.core.log.ActivityLog;
import edu.uoc.ictflag.core.log.LogHelper;
import edu.uoc.ictflag.core.web.NavigationHelper;
import edu.uoc.ictflag.core.web.SessionBean;
import edu.uoc.ictflag.ela.bll.IExercisesReportManager;
import edu.uoc.ictflag.ela.model.FilterField;
import edu.uoc.ictflag.institution.model.Tool;

@Named
@ViewScoped
public class ExercisesReportController implements Serializable
{
	private static final long serialVersionUID = 1L;
	
	@Inject
	IExercisesReportManager exercisesReportManager;
	
	// PRIVATE FIELDS 
	
	private List<LocalizedItem> tools;
	private String[] selectedTools;
	
	private List<LocalizedItem> groupByOptions;
	private String[] groupBySelectedOptions;
	
	private boolean stackedData;
	
	private int maxGroups = 30;
	
	private BarChartModel outcomesBarChartModel;
	private List<Object[]> outcomesDataTableModel;
	
	// GETTERS AND SETTERS 
	
	public List<LocalizedItem> getTools()
	{
		return tools;
	}
	
	public void setTools(List<LocalizedItem> tools)
	{
		this.tools = tools;
	}
	
	public String[] getSelectedTools()
	{
		return selectedTools;
	}
	
	public void setSelectedTools(String[] selectedTools)
	{
		this.selectedTools = selectedTools;
	}
	
	public List<LocalizedItem> getGroupByOptions()
	{
		return groupByOptions;
	}
	
	public String[] getGroupBySelectedOptions()
	{
		return groupBySelectedOptions;
	}
	
	public void setGroupBySelectedOptions(String[] groupBySelectedOptions)
	{
		this.groupBySelectedOptions = groupBySelectedOptions;
	}
	
	public BarChartModel getOutcomesBarChartModel()
	{
		return outcomesBarChartModel;
	}
	
	public List<Object[]> getOutcomesDataTableModel()
	{
		return outcomesDataTableModel;
	}
	
	public int getMaxGroups()
	{
		return maxGroups;
	}
	
	public void setMaxGroups(int maxGroups)
	{
		this.maxGroups = maxGroups;
	}
	
	public boolean getStackedData()
	{
		return stackedData;
	}
	
	public void setStackedData(boolean stackedData)
	{
		this.stackedData = stackedData;
	}
	
	// IMPLEMENTATION
	
	@ActivityLog
	public void initialize() throws Exception
	{
		try
		{
			//if (!FacesContext.getCurrentInstance().isPostback())
			{
				createTools();
				
				createGroupByOptions();
				
				createOutcomesModels();
			}
		}
		catch (Exception e)
		{
			LogHelper.error(e);
			
			NavigationHelper.redirectTo404();
		}
	}

	public void applyFilters() throws Exception
	{
	}
	
	private void createTools() throws Exception
	{
		List<Tool> toolsList = exercisesReportManager.getTools(SessionBean.getUsername());
		
		tools = new ArrayList<LocalizedItem>();

		if (!FacesContext.getCurrentInstance().isPostback())
		{
			selectedTools = new String [toolsList.size()];
		}

		int index = 0;
		
		for (Tool tool : toolsList)
		{
			//			if (tool == null)
			//			{
			//				tools.add(new LocalizedItem(null, LocalizationController.getLocalizedString("NONE")));
			//			}
			//			else
			{
				//LocalizedString name = LocalizedString.fromStringFormat((String)tool[2]);
				
				tools.add(new LocalizedItem(tool.getId().toString(), tool.getName().getTranslation()));
				
				if (!FacesContext.getCurrentInstance().isPostback())
				{
					selectedTools[index] = tool.getId().toString();
				}
			}
			
			index++;
		}
	}
	
	private void createGroupByOptions()
	{
		groupByOptions = new ArrayList<LocalizedItem>();
		groupByOptions.add(new LocalizedItem(FilterField.TOOL, LocalizationController.getLocalizedString("Tool")));
		groupByOptions.add(new LocalizedItem(FilterField.PROGRAM, LocalizationController.getLocalizedString("Program")));
		groupByOptions.add(new LocalizedItem(FilterField.SUBJECT, LocalizationController.getLocalizedString("Subject")));
		groupByOptions.add(new LocalizedItem(FilterField.COURSE, LocalizationController.getLocalizedString("Course")));
		groupByOptions.add(new LocalizedItem(FilterField.COURSEGROUP, LocalizationController.getLocalizedString("CourseGroup")));
		groupByOptions.add(new LocalizedItem(FilterField.ASSIGNMENT, LocalizationController.getLocalizedString("Assignment")));
		groupByOptions.add(new LocalizedItem(FilterField.EXERCISE, LocalizationController.getLocalizedString("Exercise")));
	}
	
	private void createOutcomesModels() throws Exception
	{
		outcomesDataTableModel = new ArrayList<Object[]>();
		
		outcomesBarChartModel = new BarChartModel();
		outcomesBarChartModel.setStacked(stackedData);
		
		ChartSeries right = new ChartSeries();
		right.setLabel(LocalizationController.getLocalizedString("Right"));
		
		ChartSeries wrong = new ChartSeries();
		wrong.setLabel(LocalizationController.getLocalizedString("Wrong"));
		
		ChartSeries timeout = new ChartSeries();
		timeout.setLabel(LocalizationController.getLocalizedString("Timeout"));
		
		ChartSeries error = new ChartSeries();
		error.setLabel(LocalizationController.getLocalizedString("Error"));
		
		outcomesBarChartModel.addSeries(right);
		outcomesBarChartModel.addSeries(wrong);
		outcomesBarChartModel.addSeries(timeout);
		outcomesBarChartModel.addSeries(error);
		
		Map<String, String[]> filters = new HashMap<String, String[]>();
		
		if (selectedTools.length != tools.size()) // NOT ALL SELECTED
		{
			filters.put(FilterField.TOOL, selectedTools);
		}
		
		List<Object[]> outcomesData = exercisesReportManager.getOutcomesData(SessionBean.getUsername(), groupBySelectedOptions, filters);
		
		long max = 0;
		
		int index = 0;
		
		for (Object[] exercise : outcomesData)
		{
			String label = LocalizationController.getLocalizedString("Total");
			String labelTable = LocalizationController.getLocalizedString("Total");
			
			String NONE = LocalizationController.getLocalizedString("NONE");
			
			if (exercise.length > 4)
			{
				label = exercise[4] == null ? NONE : (String) exercise[4];
				
				labelTable = groupByOptionToDataTableLabel(groupBySelectedOptions[0]) + ": " + (exercise[4] == null ? NONE : (String) exercise[4]);
				
				for (int i = 5; i < exercise.length; i++)
				{
					label = label + " - " + exercise[i] == null ? NONE : (String) exercise[i];
					
					labelTable = labelTable + "\n" + groupByOptionToDataTableLabel(groupBySelectedOptions[i - 4]) + ": "
							+ (exercise[i] == null ? NONE : (String) exercise[i]);
				}
			}
			
			right.set(label, (Number) exercise[0]);
			wrong.set(label, (Number) exercise[1]);
			timeout.set(label, (Number) exercise[2]);
			error.set(label, (Number) exercise[3]);
			
			outcomesDataTableModel
					.add(new Object[] { labelTable, (Number) exercise[0], (Number) exercise[1], (Number) exercise[2], (Number) exercise[3] });
			
			if (stackedData)
			{
				long sum = (long) exercise[0] + (long) exercise[1] + (long) exercise[2] + (long) exercise[3];
				
				max = Math.max(max, sum);
			}
			else
			{
				max = Math.max(max, (long) exercise[0]);
				max = Math.max(max, (long) exercise[1]);
				max = Math.max(max, (long) exercise[2]);
				max = Math.max(max, (long) exercise[3]);
			}
			
			index++;
			
			if (index > maxGroups)
			{
				break;
			}
		}
		
		outcomesBarChartModel.setTitle(LocalizationController.getLocalizedString("Outcomes"));
		outcomesBarChartModel.setLegendPosition("ne");
	         
		Axis xAxis = outcomesBarChartModel.getAxis(AxisType.X);
		xAxis.setLabel(LocalizationController.getLocalizedString("Outcome"));
	         
		Axis yAxis = outcomesBarChartModel.getAxis(AxisType.Y);
		yAxis.setLabel("#");
		yAxis.setMin(0);
		yAxis.setMax(max + 10);
	}
	
	private String groupByOptionToDataTableLabel(String groupByOption)
	{
		switch (groupByOption)
		{
			case FilterField.TOOL:
				
				return LocalizationController.getLocalizedString("Tool");
			
			case FilterField.PROGRAM:
				
				return LocalizationController.getLocalizedString("Program");
			
			case FilterField.SUBJECT:
				
				return LocalizationController.getLocalizedString("Subject");
			
			case FilterField.COURSE:
				
				return LocalizationController.getLocalizedString("Course");
			
			case FilterField.COURSEGROUP:
				
				return LocalizationController.getLocalizedString("CourseGroup");
			
			case FilterField.ASSIGNMENT:
				
				return LocalizationController.getLocalizedString("Assignment");
			
			case FilterField.EXERCISE:
				
				return LocalizationController.getLocalizedString("Exercise");
		}
		
		return "";
	}
}
