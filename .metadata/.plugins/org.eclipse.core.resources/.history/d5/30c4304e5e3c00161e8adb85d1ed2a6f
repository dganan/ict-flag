package edu.uoc.ictflag.ela.dal;

import java.util.List;
import java.util.Map;

import javax.ejb.Stateless;
import javax.inject.Inject;
import javax.transaction.Transactional;
import javax.transaction.Transactional.TxType;

import edu.uoc.ictflag.ela.model.AssignmentsReportDataItem;
import edu.uoc.ictflag.institution.dal.ICourseGroupRepository;
import edu.uoc.ictflag.institution.dal.ICourseRepository;
import edu.uoc.ictflag.institution.dal.IProgramRepository;
import edu.uoc.ictflag.institution.dal.ISemesterRepository;
import edu.uoc.ictflag.institution.dal.ISubjectRepository;
import edu.uoc.ictflag.security.dal.IUserRepository;

@Stateless
@Transactional(TxType.REQUIRED)
public class AssignmentsReportRepository extends ReportRepository<AssignmentsReportDataItem> implements IAssignmentsReportRepository
{
	IExercisesReportRepository exercisesReportRepository;
	
	@Inject
	public AssignmentsReportRepository(IUserRepository userRepository, IToolRepository toolRepository, IProgramRepository programRepository, ISubjectRepository subjectRepository, ICourseRepository courseRepository, ICourseGroupRepository courseGroupRepository, IAssignmentRepository assignmentRepository, IExerciseRepository exerciseRepository, ISemesterRepository semesterRepository, IExercisesReportRepository exercisesReportRepository)
	{
		this.userRepository = userRepository;
		this.toolRepository = toolRepository;
		this.programRepository = programRepository;
		this.subjectRepository = subjectRepository;
		this.courseRepository = courseRepository;
		this.courseGroupRepository = courseGroupRepository;
		this.assignmentRepository = assignmentRepository;
		this.exerciseRepository = exerciseRepository;
		this.semesterRepository = semesterRepository;
		this.exercisesReportRepository = exercisesReportRepository;
	}
	
	@Override
	protected AssignmentsReportDataItem createItemForRow(Object[] o)
	{
		return new AssignmentsReportDataItem(o);
	}
	
	@Override
	protected String ensambleQuery(StringBuilder select, StringBuilder from, StringBuilder where, StringBuilder groupBy)
	{
		return "SELECT min(dw.grade) as minNumericGrade, avg(dw.grade) as avgNumericGrade, max(dw.grade) as maxNumericGrade, "
				+ " sum(case when dw.grade >= 8.5 then 1 else 0 end) as A, "
				+ " sum(case when dw.grade >= 6.5 and dw.grade < 8.5 then 1 else 0 end) as B, "
				+ " sum(case when dw.grade >= 5 and dw.grade < 6.5 then 1 else 0 end) as Cplus, "
				+ " sum(case when dw.grade >= 3 and dw.grade < 5 then 1 else 0 end) as Cminus, "
				+ " sum(case when dw.grade < 3 then 1 else 0 end) as D, "
				
				+ " sum(edw.right) as right, sum(edw.wrong) as wrong, sum(edw.timeout) as timeout, sum(edw.error) as error, "
				
				+ " 0 as minAttemptNumber, 0 as avgAttemptNumber, 0 as maxAttemptNumber, "
				+ " 0 as minTimeBetweenAttempts, 0 as avgTimeBetweenAttempts, 0 as maxTimeBetweenAttempts, "
				
				//						+ "min(attemptnumber) as minAttemptNumber, avg(attemptnumber) as avgAttemptNumber, max(attemptnumber) as maxAttemptNumber, "
				//						+ "min(timefromlastattempt_sec) filter (where timefromlastattempt_sec > 0) as minTimeBetweenAttempts, avg(timefromlastattempt_sec) filter (where timefromlastattempt_sec > 0) as avgTimeBetweenAttempts, max(timefromlastattempt_sec) filter (where timefromlastattempt_sec > 0) as maxTimeBetweenAttempts, "
				
				+ "min(dw.duration_sec) / 60.0 as minDuration, " // convert into minutes
				+ "avg(dw.duration_sec) filter (where dw.duration_sec > 0) / 60.0 " // convert into minutes
				+ "as avgDuration, max(dw.duration_sec) / 60.0 as maxDuration " // convert into minutes
				+ select
				+ " FROM AssignmentsDW dw JOIN (SELECT e.assignment_id, e.student_id, sum(case when outcome = 'R' then 1 else 0 end) as right, "
				+ " sum(case when outcome = 'W' then 1 else 0 end) as wrong, sum(case when outcome = 'T' then 1 else 0 end) as timeout, "
				+ " sum(case when outcome = 'E' then 1 else 0 end) as error	FROM ExercisesDW e GROUP BY e.assignment_id, e.student_id) as edw "
				+ " ON dw.assignment_id = edw.assignment_id and dw.student_id = edw.student_id "
				+ from + where + groupBy + ";";
	}
	
	protected String ensambleQuery_OLD(StringBuilder select, StringBuilder from, StringBuilder where, StringBuilder groupBy)
	{
		return "SELECT min(grade) as minNumericGrade, avg(grade) as avgNumericGrade, max(grade) as maxNumericGrade, "
				+ " sum(case when grade >= 8.5 then 1 else 0 end) as A, sum(case when grade >= 6.5 and grade < 8.5 then 1 else 0 end) as B, "
				+ " sum(case when grade >= 5 and grade < 6.5 then 1 else 0 end) as Cplus, "
				+ " sum(case when grade >= 3 and grade < 5 then 1 else 0 end) as Cminus, " + " sum(case when grade < 3 then 1 else 0 end) as D, "
						+ " 0 as right, 0 as wrong, 0 as timeout, 0 as error, "
						+ " 0 as minAttemptNumber, 0 as avgAttemptNumber, 0 as maxAttemptNumber, "
						+ " 0 as minTimeBetweenAttempts, 0 as avgTimeBetweenAttempts, 0 as maxTimeBetweenAttempts, "
						
//						" sum(case when outcome = 'R' then 1 else 0 end) as right, sum(case when outcome = 'W' then 1 else 0 end) as wrong, sum(case when outcome = 'T' then 1 else 0 end) as timeout, sum(case when outcome = 'E' then 1 else 0 end) as error, "
//						+ "min(attemptnumber) as minAttemptNumber, avg(attemptnumber) as avgAttemptNumber, max(attemptnumber) as maxAttemptNumber, "
//						+ "min(timefromlastattempt_sec) filter (where timefromlastattempt_sec > 0) as minTimeBetweenAttempts, avg(timefromlastattempt_sec) filter (where timefromlastattempt_sec > 0) as avgTimeBetweenAttempts, max(timefromlastattempt_sec) filter (where timefromlastattempt_sec > 0) as maxTimeBetweenAttempts, "
						
						+ "min(duration_sec) / 60.0 as minDuration, " // convert into minutes
						+ "avg(duration_sec) filter (where duration_sec > 0) / 60.0 " // convert into minutes
						+ "as avgDuration, max(duration_sec) / 60.0 as maxDuration " // convert into minutes
				+ select + " FROM AssignmentsDW dw" + from + where + groupBy + ";";
	}

	@Override
	public List<AssignmentsReportDataItem> getReportData(String username, String[] groupByFieldsArray, Map<String, String[]> filtersArray) throws Exception
	{
		List<AssignmentsReportDataItem> data = super.getReportData(username, groupByFieldsArray, filtersArray);  
	
		return data;
	}
}
