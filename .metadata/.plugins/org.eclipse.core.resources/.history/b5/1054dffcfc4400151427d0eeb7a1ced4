package com.lissenberg.beanvalidation;

import java.lang.annotation.Documented;
import java.lang.annotation.Retention;
import java.lang.annotation.Target;

import javax.validation.Constraint;
import javax.validation.ConstraintValidator;
import javax.validation.ConstraintValidatorContext;
import javax.validation.Payload;

import static java.lang.annotation.ElementType.ANNOTATION_TYPE;
import static java.lang.annotation.ElementType.CONSTRUCTOR;
import static java.lang.annotation.ElementType.FIELD;
import static java.lang.annotation.ElementType.METHOD;
import static java.lang.annotation.ElementType.PARAMETER;
import static java.lang.annotation.RetentionPolicy.RUNTIME;

@Constraint(validatedBy = {Password.PasswordValidator.class})
@Documented
@Target({METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER})
@Retention(RUNTIME)
/**
 * A password must be at least 8 charters long. It must contain 1 character of each of the following type:
 * lowercase letter, uppercase letter and digit.
 */
public @interface Password {
	String message() default "{invalid.password}";

	Class<?>[] groups() default {};

	Class<? extends Payload>[] payload() default {};

	@Target({METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER})
	@Retention(RUNTIME)
	@Documented
	@interface List {
		Password[] value();
	}

	class PasswordValidator implements ConstraintValidator<Password, String> {
		@Override
		public void initialize(Password password) {
		}

		@Override
		public boolean isValid(String s, ConstraintValidatorContext constraintValidatorContext) {
			if (s == null || s.length() < 8) {
				return false;
			}
			boolean lower = false, upper = false, digit = false;
			for (char c : s.toCharArray()) {
				lower = lower | Character.isLowerCase(c);
				upper = upper | Character.isUpperCase(c);
				digit = digit | Character.isDigit(c);
			}

			return lower && upper && digit;
		}
	}

}
