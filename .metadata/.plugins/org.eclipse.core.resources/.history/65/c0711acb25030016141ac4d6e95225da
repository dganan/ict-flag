package edu.uoc.ictflag.ela.dal;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.ejb.Stateless;
import javax.inject.Inject;
import javax.transaction.Transactional;
import javax.transaction.Transactional.TxType;

import edu.uoc.ictflag.core.log.LogHelper;
import edu.uoc.ictflag.ela.model.ExerciseAction;
import edu.uoc.ictflag.ela.model.ExerciseData;
import edu.uoc.ictflag.ela.model.ExerciseDataRaw;
import edu.uoc.ictflag.ela.model.Outcome;
import edu.uoc.ictflag.institution.dal.ICourseGroupRepository;
import edu.uoc.ictflag.institution.dal.ICourseRepository;
import edu.uoc.ictflag.institution.dal.IProgramRepository;
import edu.uoc.ictflag.institution.dal.ISemesterRepository;
import edu.uoc.ictflag.institution.dal.ISubjectRepository;
import edu.uoc.ictflag.institution.dal.IToolRepository;
import edu.uoc.ictflag.institution.model.Course;
import edu.uoc.ictflag.institution.model.Program;
import edu.uoc.ictflag.institution.model.Semester;
import edu.uoc.ictflag.institution.model.Subject;
import edu.uoc.ictflag.institution.model.Tool;
import edu.uoc.ictflag.security.dal.IUserRepository;
import edu.uoc.ictflag.security.model.User;

@Stateless
@Transactional(TxType.REQUIRED)
public class ExerciseDataRepository extends ELADataBaseRepository implements IExerciseDataRepository
{
	@Inject
	public ExerciseDataRepository(IToolRepository toolRepository, IUserRepository userRepository, IProgramRepository programRepository, ISubjectRepository subjectRepository, ISemesterRepository semesterRepository, ICourseRepository courseRepository, ICourseGroupRepository courseGroupRepository)
	{
		this.toolRepository = toolRepository;
		this.userRepository = userRepository;
		this.programRepository = programRepository;
		this.subjectRepository = subjectRepository;
		this.semesterRepository = semesterRepository;
		this.courseRepository = courseRepository;
		this.courseGroupRepository = courseGroupRepository;
	}
	
	@Override
	public void saveExerciseDataRaw(ExerciseDataRaw exerciseDataRaw) throws Exception
	{
		ArrayList<Object> parameters = new ArrayList<Object>();
		
		parameters.add(exerciseDataRaw.getTool());
		parameters.add(exerciseDataRaw.getToolUUID());
		parameters.add(exerciseDataRaw.getUserId());
		parameters.add(exerciseDataRaw.getTimestamp());
		parameters.add(exerciseDataRaw.getProgramCode());
		parameters.add(exerciseDataRaw.getSubjectCode());
		parameters.add(exerciseDataRaw.getSemester());
		parameters.add(exerciseDataRaw.getAction());
		parameters.add(exerciseDataRaw.getAssignment());
		parameters.add(exerciseDataRaw.getExercise());
		parameters.add(exerciseDataRaw.getOutcome());
		parameters.add(exerciseDataRaw.getGrade());
		
		dbHelper.executeUpdateNative(
				"INSERT INTO ExerciseDataRaw (tool, tooluuid, userid, timestamp, programcode, subjectcode, semester, action, assignment, exercise, outcome, grade) VALUES (?,?,?,?,?,?,?,?,?,?,?,?)",
				parameters);
	}
	
	@Override
	@Transactional(TxType.NOT_SUPPORTED)
	public void exerciseDataEtlProcess() throws Exception
	{
		// Get all AssignmentDataRaw pending to process and process them one by one
		
		List<Object[]> data = dbHelper.getNativeQueryResult("SELECT * FROM ExerciseDataRaw WHERE handled = FALSE ORDER BY timestamp");
				
		for (Object[] raw : data)
		{
			try
			{
				dbHelper.flush();
				
				ExerciseDataRaw edr = new ExerciseDataRaw(raw);
				
				processExerciseDataRaw(edr);
				
				dbHelper.flush();
				
				//List<Object> parameters = new ArrayList<Object>();
				
				//parameters.add(edr.getId());
				
				//dbHelper.executeUpdateNative("UPDATE ExerciseDataRaw SET handled = TRUE WHERE id = ?", parameters);
			}
			catch (Exception ex)
			{
				LogHelper.error(ex);
			}
		}
	}
	
	private void processExerciseDataRaw(ExerciseDataRaw exerciseDataRaw) throws Exception
	{
		ExerciseData exerciseData = new ExerciseData();

		// Set tool
		exerciseData.setTool(toolRepository.getToolByCode(exerciseDataRaw.getTool()));
		
		// Set user
		User u = getStudent(exerciseDataRaw.getUserId());
		
		if (u == null)
		{
			u = fixUpStudent(exerciseDataRaw.getUserId());
			
			exerciseData.setStudentFixedUp(true);
		}
		
		exerciseData.setStudent(u);
		
		// Set program
		
		if (exerciseDataRaw.getProgramCode() != null)
		{
			Program p = programRepository.getProgramByCode(exerciseDataRaw.getProgramCode());
			
			if (p == null)
			{
				// is fixed up because the specified program code is not valid so set program = null
				exerciseData.setProgramFixedUp(true);
			}
			else
			{
				exerciseData.setProgram(p);
			}
		}
		
		// Set subject
		
		String subjectCode = exerciseDataRaw.getSubjectCode();
		
		if (subjectCode != null)
		{			
			if (exerciseDataRaw.getSubjectCode().trim().equals(""))
			{
				// is fixed up because the specified subject code is empty so set subject = null
				exerciseData.setSubjectFixedUp(true);
			}
			else
			{
				Subject s = subjectRepository.getSubjectByCode(subjectCode);
				
				if (s == null)
				{
					s = fixUpSubject(exerciseData.getProgram(), subjectCode);
					
					exerciseData.setSubjectFixedUp(true);
				}
				
				exerciseData.setSubject(s);
			}
		}
		
		// Set semester
		
		String semesterCode = exerciseDataRaw.getSemester();

		Semester sem = null;
		
		if (semesterCode != null)
		{
			sem = semesterRepository.getSemesterByCode(semesterCode);
		}

		if (sem == null)
		{
			exerciseData.setSemesterFixedUp(true);
			
			// Get current semester (if any)
			sem = semesterRepository.getSemesterByDate(new Date());
		}
		
		exerciseData.setSemester(sem);

		// Calculate course if possible
		
		if (exerciseData.getSubject() != null && exerciseData.getSemester() != null)
		{
			Course course = courseRepository.getCourse(exerciseData.getSubject(), exerciseData.getSemester());
			
			if (course != null)
			{
				exerciseData.setCourse(course);

				exerciseData.setCourseGroup(courseGroupRepository.getStudentCourseGroup(course, exerciseData.getStudent()));
			}
		}
		
		// Set assignment and exercise
		
		if (exerciseDataRaw.getAssignment() != null && exerciseDataRaw.getAssignment().trim().length() > 0)
		{
			exerciseData.setAssignment(exerciseDataRaw.getAssignment());
		}
		
		exerciseData.setExercise(exerciseDataRaw.getExercise());
		
		// Process exercise action
		
		ExerciseAction exerciseAction = ExerciseAction.fromString(exerciseDataRaw.getAction());
		
		Date date = new Date();
		
		try
		{
			if (exerciseDataRaw.getTimestamp() != null)
			{
				DateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				
				date = formatter.parse(exerciseDataRaw.getTimestamp());
			}
		}
		catch (ParseException pe)
		{
		
		}
		
		switch (exerciseAction)
		{
			case EXERCISE_START:
				
				exerciseData.setStartDate(date);
				exerciseData.setGrade(-1);
				processExerciseStart(exerciseData);
				break;
				
			case EXERCISE_SUBMISSION:
				
				exerciseData.setEndDate(date);
				exerciseData.setGrade(-1);
				
				Outcome outcome = Outcome.ERROR;
				
				try
				{
					outcome = Outcome.fromString(exerciseDataRaw.getOutcome());
				}
				catch (Exception e)
				{
					exerciseData.setOutcomeFixedUp(true);
				}
				
				exerciseData.setOutcome (outcome);
				
				processExerciseSubmission(exerciseData);
				break;
				
			case EXERCISE_ASSESSMENT:
				
				exerciseData.setEndDate(date); // assessment date, in fact
				
				double grade = Double.parseDouble(exerciseDataRaw.getGrade());
				
				exerciseData.setGrade(grade);
				exerciseData.setGradeIncorrect(grade < 0 || grade > 10);
				
				processExerciseAssessment(exerciseData);
				break;
		}
		
	}
	
	private void processExerciseStart(ExerciseData exerciseData) throws Exception
	{
		// Get last attempt
		
		ExerciseData lastAttempt = getLastExerciseData(exerciseData.getProgram(), exerciseData.getSubject(), exerciseData.getTool(),
				exerciseData.getSemester(), exerciseData.getStudent(), exerciseData.getAssignment(), exerciseData.getExercise());
				
		if (lastAttempt == null)
		{
			exerciseData.setTimeFromLastAttempt_sec(0);
			exerciseData.setAttemptNumber(1);
		}
		else
		{
			if (lastAttempt.getEndDate() != null)
			{
				exerciseData.setTimeFromLastAttempt_sec((exerciseData.getStartDate().getTime() - lastAttempt.getEndDate().getTime()) / 1000);
			}
			else
			{
				exerciseData.setTimeFromLastAttempt_sec((exerciseData.getStartDate().getTime() - lastAttempt.getStartDate().getTime()) / 1000);
			}
			
			exerciseData.setAttemptNumber(lastAttempt.getAttemptNumber() + 1);
		}
		
		exerciseData.setDuration_sec(-1);
		
		dbHelper.createOrUpdateEntity(exerciseData);
	}
	
	private void processExerciseSubmission(ExerciseData exerciseData) throws Exception
	{
		// Get last attempt
		
		ExerciseData lastAttempt = getLastExerciseData(exerciseData.getProgram(), exerciseData.getSubject(), exerciseData.getTool(),
				exerciseData.getSemester(), exerciseData.getStudent(), exerciseData.getAssignment(), exerciseData.getExercise());
				
		if (lastAttempt == null || lastAttempt.getEndDate() != null)
		{
			exerciseData.setStartDate(exerciseData.getEndDate());
			exerciseData.setStartDateFixedUp(true);
			exerciseData.setEndDate(exerciseData.getEndDate());
			
			if (lastAttempt == null)
			{
				exerciseData.setTimeFromLastAttempt_sec(0);
				exerciseData.setAttemptNumber(1);
			}
			else
			{
				exerciseData.setTimeFromLastAttempt_sec((exerciseData.getStartDate().getTime() - lastAttempt.getEndDate().getTime()) / 1000);
				exerciseData.setAttemptNumber(lastAttempt.getAttemptNumber() + 1);
			}
			
			exerciseData.setDuration_sec(0);
			
			lastAttempt = exerciseData;
		}
		else
		{
			lastAttempt.setEndDate(exerciseData.getEndDate());
			
			lastAttempt.setDuration_sec((lastAttempt.getEndDate().getTime() - lastAttempt.getStartDate().getTime()) / 1000);
		}
		
		lastAttempt.setOutcome(exerciseData.getOutcome());
		lastAttempt.setOutcomeFixedUp(exerciseData.isOutcomeFixedUp());
		
		dbHelper.createOrUpdateEntity(lastAttempt);
	}
	
	private void processExerciseAssessment(ExerciseData exerciseData) throws Exception
	{
		// Get last attempt
		
		ExerciseData lastAttempt = getLastExerciseData(exerciseData.getProgram(), exerciseData.getSubject(), exerciseData.getTool(),
				exerciseData.getSemester(), exerciseData.getStudent(), exerciseData.getAssignment(), exerciseData.getExercise());
				
		if (lastAttempt == null || !lastAttempt.isGradeNull())
		{
			exerciseData.setStartDate(exerciseData.getEndDate());
			exerciseData.setStartDateFixedUp(true);
			exerciseData.setEndDateFixedUp(true);
			
			if (lastAttempt == null)
			{
				exerciseData.setTimeFromLastAttempt_sec(0);
				exerciseData.setAttemptNumber(1);
			}
			else
			{
				exerciseData.setTimeFromLastAttempt_sec((exerciseData.getStartDate().getTime() - lastAttempt.getEndDate().getTime()) / 1000);
				exerciseData.setAttemptNumber(lastAttempt.getAttemptNumber() + 1);
			}
			
			exerciseData.setDuration_sec(0);
			
			lastAttempt = exerciseData;
		}
		else
		{
			if (lastAttempt.getEndDate() == null)
			{
				lastAttempt.setEndDate(exerciseData.getEndDate());
				lastAttempt.setEndDateFixedUp(true);
			}
			
			lastAttempt.setDuration_sec((lastAttempt.getEndDate().getTime() - lastAttempt.getStartDate().getTime()) / 1000);
		}
		
		lastAttempt.setGrade(exerciseData.getGrade());
		lastAttempt.setGradeIncorrect(exerciseData.isGradeIncorrect());
		
		dbHelper.createOrUpdateEntity(lastAttempt);
	}
	
	private ExerciseData getLastExerciseData(Program program, Subject subject, Tool tool, Semester semester, User student, String assignment,
			String exercise) throws Exception
	{
		Map<String, Object> parameters = new HashMap<String, Object>();
		
		StringBuilder sb = new StringBuilder("SELECT d FROM ExerciseData d WHERE ");
		
		addParameterSafely(sb, parameters, "program", program, true);
		addParameterSafely(sb, parameters, "subject", subject, true);
		addParameterSafely(sb, parameters, "tool", tool, true);
		addParameterSafely(sb, parameters, "semester", semester, true);
		addParameterSafely(sb, parameters, "student", student, true);
		addParameterSafely(sb, parameters, "assignment", assignment, true);
		addParameterSafely(sb, parameters, "exercise", exercise, false);
	
		sb.append("ORDER BY d.startDate DESC");
		
		return dbHelper.getFirst(sb.toString(), ExerciseData.class, parameters);
	}
}
